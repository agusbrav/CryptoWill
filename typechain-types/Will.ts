/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface WillInterface extends utils.Interface {
  contractName: "Will";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "LAWYER()": FunctionFragment;
    "OWNER()": FunctionFragment;
    "PAYEE()": FunctionFragment;
    "correspondingTokens()": FunctionFragment;
    "executeWill()": FunctionFragment;
    "expireDate()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lawyerFee()": FunctionFragment;
    "reclaimOwnerBalance()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "resetWill(address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setWill(address[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "willManuscript()": FunctionFragment;
    "willStatus()": FunctionFragment;
    "withdrawShares()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LAWYER", values?: undefined): string;
  encodeFunctionData(functionFragment: "OWNER", values?: undefined): string;
  encodeFunctionData(functionFragment: "PAYEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "correspondingTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeWill",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expireDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "lawyerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reclaimOwnerBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "resetWill", values: [string]): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setWill", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "willManuscript",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "willStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAWYER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OWNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PAYEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "correspondingTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expireDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lawyerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reclaimOwnerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "resetWill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setWill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "willManuscript",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "willStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawShares",
    data: BytesLike
  ): Result;

  events: {
    "ApprovedPayees(address)": EventFragment;
    "ChangedLawyer(address,address)": EventFragment;
    "NewPayeeAdded(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SharesWithdrawn(uint256,uint256,uint256,address)": EventFragment;
    "WillExecuted(bool,uint256,address,uint256,uint256,uint256)": EventFragment;
    "WillReport(address,address,uint256,bool,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovedPayees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedLawyer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPayeeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WillExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WillReport"): EventFragment;
}

export type ApprovedPayeesEvent = TypedEvent<[string], { _payees: string }>;

export type ApprovedPayeesEventFilter = TypedEventFilter<ApprovedPayeesEvent>;

export type ChangedLawyerEvent = TypedEvent<
  [string, string],
  { _oldLawyer: string; _newLawyer: string }
>;

export type ChangedLawyerEventFilter = TypedEventFilter<ChangedLawyerEvent>;

export type NewPayeeAddedEvent = TypedEvent<[string], { _newPayee: string }>;

export type NewPayeeAddedEventFilter = TypedEventFilter<NewPayeeAddedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type SharesWithdrawnEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    _totalAmount: BigNumber;
    _lawyerFee: BigNumber;
    _ethPerPayee: BigNumber;
    _caller: string;
  }
>;

export type SharesWithdrawnEventFilter = TypedEventFilter<SharesWithdrawnEvent>;

export type WillExecutedEvent = TypedEvent<
  [boolean, BigNumber, string, BigNumber, BigNumber, BigNumber],
  {
    _exec: boolean;
    _time: BigNumber;
    _lawyer: string;
    _unlockTime: BigNumber;
    _totalBalance: BigNumber;
    _numberOfPayees: BigNumber;
  }
>;

export type WillExecutedEventFilter = TypedEventFilter<WillExecutedEvent>;

export type WillReportEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  {
    _owner: string;
    _lawyer: string;
    _unlockTime: BigNumber;
    _withdrawAvailable: boolean;
    _totalBalance: BigNumber;
    _correspondingTokens: BigNumber;
    _lawyerFee: BigNumber;
    _expireDate: BigNumber;
  }
>;

export type WillReportEventFilter = TypedEventFilter<WillReportEvent>;

export interface Will extends BaseContract {
  contractName: "Will";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WillInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LAWYER(overrides?: CallOverrides): Promise<[string]>;

    OWNER(overrides?: CallOverrides): Promise<[string]>;

    PAYEE(overrides?: CallOverrides): Promise<[string]>;

    correspondingTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeWill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expireDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lawyerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    reclaimOwnerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetWill(
      _newLawyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWill(
      _payeesAdd: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    willManuscript(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        testator: string;
        lawyer: string;
        waitTime: BigNumber;
        executed: boolean;
        unlockTime: BigNumber;
      }
    >;

    willStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  LAWYER(overrides?: CallOverrides): Promise<string>;

  OWNER(overrides?: CallOverrides): Promise<string>;

  PAYEE(overrides?: CallOverrides): Promise<string>;

  correspondingTokens(overrides?: CallOverrides): Promise<BigNumber>;

  executeWill(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expireDate(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lawyerFee(overrides?: CallOverrides): Promise<BigNumber>;

  reclaimOwnerBalance(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetWill(
    _newLawyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWill(
    _payeesAdd: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  willManuscript(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, BigNumber] & {
      testator: string;
      lawyer: string;
      waitTime: BigNumber;
      executed: boolean;
      unlockTime: BigNumber;
    }
  >;

  willStatus(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawShares(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    LAWYER(overrides?: CallOverrides): Promise<string>;

    OWNER(overrides?: CallOverrides): Promise<string>;

    PAYEE(overrides?: CallOverrides): Promise<string>;

    correspondingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    executeWill(overrides?: CallOverrides): Promise<void>;

    expireDate(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lawyerFee(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimOwnerBalance(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    resetWill(_newLawyer: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setWill(_payeesAdd: string[], overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    willManuscript(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, BigNumber] & {
        testator: string;
        lawyer: string;
        waitTime: BigNumber;
        executed: boolean;
        unlockTime: BigNumber;
      }
    >;

    willStatus(overrides?: CallOverrides): Promise<void>;

    withdrawShares(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ApprovedPayees(address)"(_payees?: null): ApprovedPayeesEventFilter;
    ApprovedPayees(_payees?: null): ApprovedPayeesEventFilter;

    "ChangedLawyer(address,address)"(
      _oldLawyer?: null,
      _newLawyer?: null
    ): ChangedLawyerEventFilter;
    ChangedLawyer(
      _oldLawyer?: null,
      _newLawyer?: null
    ): ChangedLawyerEventFilter;

    "NewPayeeAdded(address)"(_newPayee?: null): NewPayeeAddedEventFilter;
    NewPayeeAdded(_newPayee?: null): NewPayeeAddedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "SharesWithdrawn(uint256,uint256,uint256,address)"(
      _totalAmount?: null,
      _lawyerFee?: null,
      _ethPerPayee?: null,
      _caller?: null
    ): SharesWithdrawnEventFilter;
    SharesWithdrawn(
      _totalAmount?: null,
      _lawyerFee?: null,
      _ethPerPayee?: null,
      _caller?: null
    ): SharesWithdrawnEventFilter;

    "WillExecuted(bool,uint256,address,uint256,uint256,uint256)"(
      _exec?: null,
      _time?: null,
      _lawyer?: null,
      _unlockTime?: null,
      _totalBalance?: null,
      _numberOfPayees?: null
    ): WillExecutedEventFilter;
    WillExecuted(
      _exec?: null,
      _time?: null,
      _lawyer?: null,
      _unlockTime?: null,
      _totalBalance?: null,
      _numberOfPayees?: null
    ): WillExecutedEventFilter;

    "WillReport(address,address,uint256,bool,uint256,uint256,uint256,uint256)"(
      _owner?: null,
      _lawyer?: null,
      _unlockTime?: null,
      _withdrawAvailable?: null,
      _totalBalance?: null,
      _correspondingTokens?: null,
      _lawyerFee?: null,
      _expireDate?: null
    ): WillReportEventFilter;
    WillReport(
      _owner?: null,
      _lawyer?: null,
      _unlockTime?: null,
      _withdrawAvailable?: null,
      _totalBalance?: null,
      _correspondingTokens?: null,
      _lawyerFee?: null,
      _expireDate?: null
    ): WillReportEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LAWYER(overrides?: CallOverrides): Promise<BigNumber>;

    OWNER(overrides?: CallOverrides): Promise<BigNumber>;

    PAYEE(overrides?: CallOverrides): Promise<BigNumber>;

    correspondingTokens(overrides?: CallOverrides): Promise<BigNumber>;

    executeWill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expireDate(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lawyerFee(overrides?: CallOverrides): Promise<BigNumber>;

    reclaimOwnerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetWill(
      _newLawyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWill(
      _payeesAdd: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    willManuscript(overrides?: CallOverrides): Promise<BigNumber>;

    willStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    LAWYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OWNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PAYEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    correspondingTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeWill(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expireDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lawyerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reclaimOwnerBalance(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetWill(
      _newLawyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWill(
      _payeesAdd: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    willManuscript(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    willStatus(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawShares(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
