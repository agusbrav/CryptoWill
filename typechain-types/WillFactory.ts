/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { OnEvent, TypedEvent, TypedEventFilter, TypedListener } from "./common";

export interface WillFactoryInterface extends utils.Interface {
  contractName: "WillFactory";
  functions: {
    "checkWills(address)": FunctionFragment;
    "createWillContract(address,uint256)": FunctionFragment;
    "willOwners(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "checkWills", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createWillContract",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "willOwners", values: [string]): string;

  decodeFunctionResult(functionFragment: "checkWills", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWillContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "willOwners", data: BytesLike): Result;

  events: {
    "WillCreated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WillCreated"): EventFragment;
}

export type WillCreatedEvent = TypedEvent<
  [string, string],
  { _owner: string; _newWIll: string }
>;

export type WillCreatedEventFilter = TypedEventFilter<WillCreatedEvent>;

export interface WillFactory extends BaseContract {
  contractName: "WillFactory";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WillFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkWills(_address: string, overrides?: CallOverrides): Promise<[string]>;

    createWillContract(
      _lawyer: string,
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    willOwners(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  checkWills(_address: string, overrides?: CallOverrides): Promise<string>;

  createWillContract(
    _lawyer: string,
    _lockTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  willOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    checkWills(_address: string, overrides?: CallOverrides): Promise<string>;

    createWillContract(
      _lawyer: string,
      _lockTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    willOwners(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "WillCreated(address,address)"(
      _owner?: null,
      _newWIll?: null
    ): WillCreatedEventFilter;
    WillCreated(_owner?: null, _newWIll?: null): WillCreatedEventFilter;
  };

  estimateGas: {
    checkWills(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

    createWillContract(
      _lawyer: string,
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    willOwners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkWills(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWillContract(
      _lawyer: string,
      _lockTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    willOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
